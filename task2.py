# -*- coding: utf-8 -*-
"""Tak2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VbjoDkrZi_qqPv8dM2UoBjwynAcSt_Iu
"""

from google.colab import files
uploaded = files.upload()  # Choose your image from your computer
image_name = list(uploaded.keys())[0]  # Get the uploaded file name

from PIL import Image
import numpy as np
import random

def encrypt_decrypt_image(image_path, key, mode, operation):

    # Open image
    img = Image.open(image_path)
    img_array = np.array(img, dtype=np.int16)  # use int16 to avoid overflow

    # Apply operation
    if operation == 'shift':
        # For decryption, reverse the key
        if mode.lower() == 'decrypt':
            key = -key
        # Shift pixel values and wrap around 0-255
        img_array = (img_array + key) % 256

    elif operation == 'swap':
        # Flatten the array for easy swapping
        flat = img_array.flatten()
        np.random.seed(key)  # use key as seed for reproducibility
        # Shuffle the pixels
        np.random.shuffle(flat)
        img_array = flat.reshape(img_array.shape)

        # For decryption, reshuffle with same seed restores original
        if mode.lower() == 'decrypt':
            np.random.seed(key)
            # Inverse shuffle: sort the indices according to shuffle order
            indices = np.arange(len(flat))
            np.random.shuffle(indices)
            img_array = flat[np.argsort(indices)].reshape(img_array.shape)

    # Convert back to uint8 image
    img_array = img_array.astype(np.uint8)
    result_img = Image.fromarray(img_array)
    return result_img

# --- Main Program ---
print("=== Simple Image Encryption/Decryption Tool ===")
# Use the name of the uploaded image directly
image_path = image_name
key = int(input("Enter a key value (integer, example: 50): "))
mode = input("Type 'encrypt' to encrypt or 'decrypt' to decrypt: ").lower()
operation = input("Choose operation - 'shift' or 'swap': ").lower()

# Process the image
result_image = encrypt_decrypt_image(image_path, key, mode, operation)

# Save the result
output_path = f"result_{mode}_{operation}.png"
result_image.save(output_path)
print(f"âœ… Done! The {mode}ed image is saved as '{output_path}'")

